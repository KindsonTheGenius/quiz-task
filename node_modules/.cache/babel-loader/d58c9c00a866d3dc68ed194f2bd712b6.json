{"ast":null,"code":"var _jsxFileName = \"D:\\\\ReactProjects\\\\storage-app\\\\src\\\\Quiz.js\";\nimport Dexie from 'dexie';\nimport React, { Component } from 'react';\nimport QuestionBox from './QuestionBox';\nimport Scoresheet from './Scoresheet';\nexport class Quiz extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      questionBank: [],\n      currentIndex: 0\n    };\n\n    this.loadQuestions = () => {\n      let arr = [];\n      var db = new Dexie('questionsDB');\n      db.version(2).stores({\n        questions: 'id,question, option1, option2, option3, option4, answer'\n      });\n      db.open().catch(function () {\n        console.log(\"Error Occurred: \");\n      });\n      db.questions.each(item => arr.push(item)).then(() => this.setState({\n        questionBank: arr\n      }));\n    };\n\n    this.showOneQuestion = () => {\n      const {\n        currentIndex\n      } = this.state; //get the current question index\n\n      this.setState(() => {\n        return {// question: QuizData[currentIndex].question\n          // options : QuizData[currentIndex].options,\n          // answer: QuizData[currentIndex].answer          \n        };\n      });\n    };\n\n    this.retakeQuiz = () => {\n      this.setState({\n        currentIndex: 0\n      });\n    };\n\n    this.nextQuestionHander = () => {\n      this.setState({\n        currentIndex: this.state.currentIndex + 1\n      });\n      console.log(this.state.currentIndex);\n      console.log(\"Total Questions \" + this.state.questionBank.length);\n    };\n  }\n\n  componentDidMount() {\n    this.loadQuestions();\n  }\n\n  render() {\n    const {\n      currentIndex,\n      questionBank\n    } = this.state;\n    var currentQuestion = questionBank[currentIndex];\n\n    if (currentIndex <= questionBank.length - 1) {\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(QuestionBox, {\n        currentQuestion: currentQuestion,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        onClick: this.nextQuestionHander,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, \"Next\"));\n    } else {\n      return React.createElement(React.Fragment, null, React.createElement(Scoresheet, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.retakeQuiz,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \"Retake Quiz\"));\n    }\n  }\n\n}\nexport default Quiz;","map":{"version":3,"sources":["D:/ReactProjects/storage-app/src/Quiz.js"],"names":["Dexie","React","Component","QuestionBox","Scoresheet","Quiz","state","questionBank","currentIndex","loadQuestions","arr","db","version","stores","questions","open","catch","console","log","each","item","push","then","setState","showOneQuestion","retakeQuiz","nextQuestionHander","length","componentDidMount","render","currentQuestion"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,WAAP,MAAyB,eAAzB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AAGA,OAAO,MAAMC,IAAN,SAAmBH,SAAnB,CAA6B;AAAA;AAAA;AAAA,SAEhCI,KAFgC,GAExB;AACJC,MAAAA,YAAY,EAAE,EADV;AAEJC,MAAAA,YAAY,EAAE;AAFV,KAFwB;;AAAA,SAQhCC,aARgC,GAQhB,MAAM;AAClB,UAAIC,GAAG,GAAG,EAAV;AACA,UAAIC,EAAE,GAAG,IAAIX,KAAJ,CAAU,aAAV,CAAT;AACAW,MAAAA,EAAE,CAACC,OAAH,CAAW,CAAX,EAAcC,MAAd,CAAqB;AACjBC,QAAAA,SAAS,EAAE;AADM,OAArB;AAIAH,MAAAA,EAAE,CAACI,IAAH,GAAUC,KAAV,CAAgB,YAAU;AACtBC,QAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACH,OAFD;AAIAP,MAAAA,EAAE,CAACG,SAAH,CAAaK,IAAb,CAAmBC,IAAD,IAAUV,GAAG,CAACW,IAAJ,CAASD,IAAT,CAA5B,EACCE,IADD,CACM,MAAM,KAAKC,QAAL,CAAc;AAAChB,QAAAA,YAAY,EAAEG;AAAf,OAAd,CADZ;AAEH,KArB+B;;AAAA,SAwBjCc,eAxBiC,GAwBf,MAAM;AACvB,YAAM;AAAChB,QAAAA;AAAD,UAAiB,KAAKF,KAA5B,CADuB,CACW;;AAC9B,WAAKiB,QAAL,CAAc,MAAM;AAChB,eAAO,CACH;AACA;AACA;AAHG,SAAP;AAKH,OAND;AAOH,KAjC+B;;AAAA,SAuChCE,UAvCgC,GAuCnB,MAAM;AACf,WAAKF,QAAL,CAAc;AACVf,QAAAA,YAAY,EAAE;AADJ,OAAd;AAGH,KA3C+B;;AAAA,SA8ChCkB,kBA9CgC,GA8CX,MAAM;AACvB,WAAKH,QAAL,CAAc;AACVf,QAAAA,YAAY,EAAG,KAAKF,KAAL,CAAWE,YAAX,GAA0B;AAD/B,OAAd;AAGAS,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKZ,KAAL,CAAWE,YAAvB;AACAS,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqB,KAAKZ,KAAL,CAAWC,YAAX,CAAwBoB,MAAzD;AACH,KApD+B;AAAA;;AAmChCC,EAAAA,iBAAiB,GAAE;AACf,SAAKnB,aAAL;AACH;;AAiBDoB,EAAAA,MAAM,GAAG;AACL,UAAM;AAACrB,MAAAA,YAAD;AAAeD,MAAAA;AAAf,QAA+B,KAAKD,KAA1C;AACA,QAAIwB,eAAe,GAAGvB,YAAY,CAACC,YAAD,CAAlC;;AAEA,QAAGA,YAAY,IAAID,YAAY,CAACoB,MAAb,GAAqB,CAAxC,EAA2C;AACvC,aACI,0CACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,WAAD;AAAa,QAAA,eAAe,EAAIG,eAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADA,EAIA;AAAQ,QAAA,OAAO,EAAE,KAAKJ,kBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJA,CADJ;AAQH,KATD,MAUK;AACD,aACI,0CACA,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,EAEA;AAAQ,QAAA,OAAO,EAAE,KAAKD,UAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAFA,CADJ;AAMH;AACJ;;AA5E+B;AA+EpC,eAAepB,IAAf","sourcesContent":["import Dexie from 'dexie'\r\nimport React, { Component } from 'react'\r\nimport QuestionBox  from './QuestionBox'\r\nimport Scoresheet from './Scoresheet'\r\n\r\n\r\nexport class Quiz extends Component {\r\n        \r\n    state = {\r\n        questionBank: [],\r\n        currentIndex: 0\r\n    }\r\n\r\n    //Reads the question from IndexedDB and load them into the questionBank state\r\n    loadQuestions = () => {\r\n        let arr = [];\r\n        var db = new Dexie('questionsDB');\r\n        db.version(2).stores({\r\n            questions: 'id,question, option1, option2, option3, option4, answer'\r\n        });\r\n\r\n        db.open().catch(function(){\r\n            console.log(\"Error Occurred: \")\r\n        });\r\n\r\n        db.questions.each((item) => arr.push(item))\r\n        .then(() => this.setState({questionBank: arr}));\r\n    }\r\n\r\n   //Component that holds the current quiz\r\n   showOneQuestion = () => {\r\n    const {currentIndex} = this.state //get the current question index\r\n        this.setState(() => {\r\n            return {\r\n                // question: QuizData[currentIndex].question\r\n                // options : QuizData[currentIndex].options,\r\n                // answer: QuizData[currentIndex].answer          \r\n            }\r\n        })\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.loadQuestions()\r\n    }\r\n\r\n    retakeQuiz = () => {\r\n        this.setState({\r\n            currentIndex: 0\r\n        })\r\n    }\r\n\r\n\r\n    nextQuestionHander = () => {\r\n        this.setState({\r\n            currentIndex:  this.state.currentIndex + 1\r\n        })\r\n        console.log(this.state.currentIndex)\r\n        console.log(\"Total Questions \" + this.state.questionBank.length)\r\n    }\r\n\r\n    render() {\r\n        const {currentIndex, questionBank} = this.state\r\n        var currentQuestion = questionBank[currentIndex]\r\n\r\n        if(currentIndex <= questionBank.length -1) {\r\n            return (\r\n                <>\r\n                <div>\r\n                    <QuestionBox currentQuestion = {currentQuestion}></QuestionBox>\r\n                </div>\r\n                <button onClick={this.nextQuestionHander}>Next</button>\r\n                </>\r\n            )\r\n        }\r\n        else {\r\n            return (\r\n                <>\r\n                <Scoresheet></Scoresheet>\r\n                <button onClick={this.retakeQuiz} >Retake Quiz</button>\r\n                </>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default Quiz\r\n"]},"metadata":{},"sourceType":"module"}