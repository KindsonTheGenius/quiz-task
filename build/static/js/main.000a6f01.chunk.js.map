{"version":3,"sources":["db.js","Form.js","Header.js","QuestionManager.js","Scoresheet.js","Quiz.js","Game.js","Start.js","index.js"],"names":["db","Dexie","version","stores","questions","open","catch","err","console","log","stack","Form","props","handleChange","event","inputName","target","name","setState","question","value","option1","option2","option3","option4","answer","insertData","state","preventDefault","length","alert","put","id","uuid","then","ref","onChange","this","type","size","className","onClick","Component","header","username","QuestionManager","loadQuestions","arr","each","item","push","questionBank","deleteQuestion","clickedId","delete","cancel","list","map","result","key","Header","Scoresheet","useState","goHome","setGoHome","restart","setRestart","score","totalQuestions","Quiz","nextQuestionHander","currentIndex","disabled","disabledOptions","disabledCheck","correctAnswer","userAnswer","checkAnswer","answerIsCorrect","setUserAnswer","checked","endQuiz","bind","currentQuestion","Game","numberOfQuestions","gotoQuestionManager","gotoQuiz","goBack","manageQuestions","startQuiz","count","Start","setUsername","start","startGame","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.000a6f01.chunk.js","sourcesContent":["import Dexie from 'dexie'\r\n\r\nvar db = new Dexie('questionsDB');\r\ndb.version(1).stores({\r\n    questions: 'id,question, option1, option2, option3, option4, answer'\r\n});\r\ndb.open().catch(function(err) {\r\n    console.log(err.stack || err)\r\n})\r\n\r\nexport default db;","import React, { Component } from 'react'\r\nimport uuid from 'react-uuid'\r\nimport './styles.css'\r\nimport db from './db'\r\n\r\n\r\nexport class Form extends Component {\r\n    constructor(props) {\r\n        super(props)    \r\n        this.state = {\r\n             question: '',\r\n             option1: '',\r\n             option2: '',\r\n             option3: '',\r\n             option4: '',\r\n             answer: ''        }\r\n    }\r\n\r\n    //Controlled form elements with React\r\n    handleChange = (event) => {\r\n        var inputName = event.target.name;\r\n        if(inputName === 'txtQuestion'){\r\n            this.setState({question: event.target.value})\r\n        }\r\n        else if(inputName === 'txtOption1') {\r\n            this.setState({option1: event.target.value})\r\n        }\r\n        else if(inputName === 'txtOption2') {\r\n            this.setState({option2: event.target.value})\r\n        }\r\n        else if(inputName === 'txtOption3') {\r\n            this.setState({option3: event.target.value})\r\n        }\r\n        else if(inputName === 'txtOption4') {\r\n            this.setState({option4: event.target.value})\r\n        }\r\n        else if(inputName === 'txtAnswer') {\r\n            this.setState({answer: event.target.value})\r\n        }\r\n    }\r\n\r\n    //Insert data into IndexedDB\r\n    insertData = (event) => {\r\n        const {question, option1, option2, option3, option4, answer} = this.state\r\n        event.preventDefault()\r\n         //Quick and dirty Required field validation. \r\n        if (question.length < 1 \r\n            || option1.length < 1 \r\n            || option2.length < 1 \r\n            || option3.length < 1 \r\n            || option4.length < 1 \r\n            || answer.length < 1\r\n            ) {\r\n            alert(\"Check that no textfield is empty\")\r\n        }\r\n        //Also answer must be one of the options\r\n        else if( option1 !== answer \r\n            && option2 !== answer\r\n            && option3 !== answer\r\n            && option4 !== answer\r\n        ){\r\n            alert(\"The answer must be one of the options\")\r\n        }\r\n        else {\r\n            //Actually Insert the data into the database\r\n            db.questions.put({\r\n                id: uuid(),\r\n                question: this.state.question, \r\n                option1: this.state.option1,\r\n                option2: this.state.option2,\r\n                option3: this.state.option3,\r\n                option4: this.state.option4,\r\n                answer: this.state.answer\r\n            })\r\n            .then(()=> {  \r\n                //Clear the textfields after insertion\r\n                this.setState({\r\n                    question: '',\r\n                    option1: '',\r\n                    option2: '',\r\n                    option3: '',\r\n                    option4: '',\r\n                    answer: ''\r\n                })  \r\n            })\r\n        }\r\n  };\r\n\r\n    render() {\r\n        return (           \r\n              <form>\r\n                <label>Enter Question: </label>\r\n                <input ref=\"q\" name=\"txtQuestion\" onChange={this.handleChange} type=\"text\" value={this.state.question} size=\"70\"></input>\r\n                <hr />\r\n                Answer Options\r\n                <p>\r\n                    <label>Option 1: </label>\r\n                    <input ref=\"o1\" name=\"txtOption1\" onChange={this.handleChange} type=\"text\" value={this.state.option1}></input>\r\n                </p>\r\n                <p>\r\n                    <label>Option 2: </label>\r\n                    <input ref=\"o2\" name=\"txtOption2\" onChange={this.handleChange} type=\"text\" value={this.state.option2}></input>\r\n                </p>\r\n                <p>\r\n                    <label>Option 3: </label>\r\n                    <input ref=\"o3\" name=\"txtOption3\" onChange={this.handleChange} type=\"text\" value={this.state.option3}></input>\r\n                </p>\r\n                <p>\r\n                    <label>Option 4: </label>\r\n                    <input ref=\"o4\" name=\"txtOption4\" onChange={this.handleChange} type=\"text\" value={this.state.option4}></input>\r\n                </p>  \r\n                <hr />\r\n                <p>\r\n                    <label>Answer: </label>\r\n                    <input name=\"txtAnswer\" onChange={this.handleChange} type=\"text\" value={this.state.answer}></input>\r\n                </p>  \r\n                <hr />                              \r\n                    <input type=\"submit\" className=\"button\" value=\"Submit Question\" onClick={this.insertData} ></input>                \r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form\r\n","import React from 'react'\r\nimport './styles.css'\r\n\r\nconst  header = (props) => {\r\n    \r\n    return (\r\n        <div>\r\n            <div className=\"header\">\r\n                Current User: <span>{props.username}</span>\r\n            </div>\r\n        </div>\r\n     )\r\n}\r\n\r\nexport default header\r\n","import React, { Component } from 'react'\r\nimport Form from './Form'\r\nimport Game from './Game.js'\r\nimport './styles.css'\r\nimport Header from './Header'\r\nimport db from './db'\r\n\r\nexport class QuestionManager extends Component {\r\n\r\nconstructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n        questionBank: [],\r\n        cancel: false\r\n    }\r\n}\r\n\r\n    //Load the question from IndexedDB\r\n    loadQuestions = () => {\r\n\r\n        let arr = [];\r\n        db.questions.each((item) => arr.push(item))\r\n        .then(() => this.setState({questionBank: arr}));\r\n    }\r\n\r\n    //Function to Delete Question based on the key\r\n    deleteQuestion = (event) => {\r\n        var clickedId = event.target.id; //id of the delete button holds the key for delete operation\r\n        db.questions.delete(clickedId).then(() =>{\r\n            this.loadQuestions();\r\n        });\r\n    }\r\n\r\n    render() {\r\n        this.loadQuestions()\r\n        //Display the list of questions\r\n        var list = this.state.questionBank.map(result =>{\r\n            return (\r\n                <div className=\"questionItem\" key={result.id}><span>{result.question}</span><button id={result.id} onClick={this.deleteQuestion}>Delete</button><br /> \r\n                        A. {result.option1};\r\n                        B. {result.option2};  \r\n                        C. {result.option3};  \r\n                        D. {result.option4}; \r\n                        <hr />\r\n                </div>\r\n            )\r\n        });\r\n        if(this.state.cancel === true){ //User want to exit the question Manager\r\n            return (\r\n                <Game username={this.props.username}></Game>\r\n            )\r\n        }\r\n        else {\r\n            //Form displays below the list\r\n        return (\r\n            <div>   \r\n                <Header username={this.props.username} />  \r\n                <center><h3>Available Questions</h3></center>           \r\n                {list}\r\n                <center><h3>Enter new question using the form below</h3></center>\r\n                <div className=\"container small\">\r\n                  <Form />\r\n                  <button onClick={() => { this.setState({cancel:true}) }}>Go Back</button>\r\n              </div> \r\n            </div>\r\n        )\r\n        }\r\n    }\r\n}\r\nexport default QuestionManager","import React, {useState} from 'react'\r\nimport './styles.css'\r\nimport Header from './Header'\r\nimport Start from './Start'\r\nimport Quiz from './Quiz'\r\n\r\n\r\nfunction Scoresheet(props) {\r\n    const [goHome, setGoHome] = useState(false) //Hook to check if Exit button was clicked\r\n    const [restart, setRestart] = useState(false) //Hook to check if Restart button was clicked\r\n\r\n    //Go Home was clicked, so load the Start Component (don't pass the username along)\r\n    if(goHome === true){\r\n        return (\r\n        <div>\r\n            <Start></Start>\r\n        </div>\r\n        )\r\n    }\r\n    //Restart was clicked so load the Quiz component (pass the username along)\r\n    if(restart === true){\r\n        return (\r\n        <div>\r\n        <Quiz username={props.username}></Quiz>\r\n         </div> \r\n        )\r\n    }\r\n    return (\r\n        <div>\r\n            <Header username={props.username} />\r\n            <div className=\"container small\">\r\n                <div className=\"scoresheet\">\r\n                    <h1>Quiz Successfully Completed</h1><br />\r\n                    <h3>Your score is {props.score}</h3>\r\n                    <h4>That is {props.score / props.totalQuestions * 100}% </h4>\r\n                </div>                \r\n                <button className=\"retakeButton\" onClick={() => setRestart(true)}>Restart Quiz</button>    \r\n                <button onClick={() => setGoHome(true)}>Exit Quiz</button>     \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scoresheet\r\n","import React, { Component } from 'react'\r\nimport Scoresheet from './Scoresheet'\r\nimport \"./styles.css\"\r\nimport Header from './Header'\r\nimport db from './db'\r\n\r\n\r\nexport class Quiz extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)   \r\n        this.state = {\r\n            questionBank: [],\r\n            currentIndex: 0,\r\n            userAnswer: null,\r\n            score:0,\r\n            disabled: true, //Enable or disable Next Button\r\n            disabledOptions: false, //Enable or disable Answer Options\r\n            option1: false, //Radio button all initially not checked, so set to false initially\r\n            option2: false,\r\n            option3: false,\r\n            option4: false,\r\n            endQuiz: false, //Checks if the quiz have ended (Current index gotten to the last)\r\n            disabledCheck:true //Enable or disable Check Answer button\r\n        }\r\n\r\n        //Bind this keyword\r\n        this.checkAnswer = this.checkAnswer.bind(this)\r\n        this.answerIsCorrect = this.answerIsCorrect.bind(this)\r\n    }\r\n    \r\n    //Reads the question from IndexedDB and load them into the questionBank\r\n    loadQuestions = () => {\r\n        let arr = [];\r\n        db.questions.each((item) => arr.push(item))\r\n        .then(() => this.setState({questionBank: arr}));\r\n    }\r\n\r\n    //Load the question from indexedDB when component mounts\r\n    componentDidMount(){\r\n        this.loadQuestions()\r\n        \r\n    }\r\n\r\n    //Increment the currentIndex when next button is clicked\r\n    nextQuestionHander = () => {\r\n        this.setState({\r\n            currentIndex:  this.state.currentIndex + 1,\r\n            disabled:true,\r\n            disabledOptions: false,\r\n            disabledCheck: true,\r\n            option1: false,\r\n            option2: false,\r\n            option3: false,\r\n            option4: false,\r\n            correctAnswer: '',\r\n            userAnswer: ''\r\n        })\r\n    }\r\n\r\n    //Check if UserAnser is correct \r\n    answerIsCorrect(userAnswer){\r\n        const {currentIndex, questionBank} = this.state\r\n        if(userAnswer === questionBank[currentIndex].answer) {\r\n            return true\r\n        } else {return false}\r\n    }\r\n\r\n    //Increment score if answer is correct and enable Next Button\r\n    checkAnswer = () =>{\r\n        const {score, userAnswer, questionBank, currentIndex} = this.state\r\n            if(this.answerIsCorrect(userAnswer)){\r\n                this.setState({\r\n                    score: score + 1\r\n                })\r\n            }\r\n            this.setState({\r\n                disabledOptions:true,\r\n                disabled: false,\r\n                correctAnswer: questionBank[currentIndex].answer\r\n            })\r\n    }\r\n    \r\n    //Set the User answer depending on which option the user clicked\r\n    setUserAnswer = (event) => {\r\n        if(event.target.id === \"o1\") { \r\n            this.setState({option1: event.target.checked, userAnswer: event.target.value })       \r\n        }\r\n        else if(event.target.id ===\"o2\") {\r\n            this.setState({option2: event.target.checked, userAnswer: event.target.value })\r\n        }\r\n        else if(event.target.id ===\"o3\") {\r\n            this.setState({option3: event.target.checked, userAnswer: event.target.value })\r\n        }\r\n        else if(event.target.id ===\"o4\") {\r\n            this.setState({option4: event.target.checked, userAnswer: event.target.value })\r\n        }\r\n        this.setState({disabledCheck:false})\r\n    }\r\n\r\n    render() {       \r\n        const {currentIndex,  endQuiz, questionBank, score, userAnswer, correctAnswer} = this.state\r\n        var currentQuestion = questionBank[currentIndex]    \r\n\r\n        if((currentIndex <= questionBank.length -1) && (endQuiz === false)) {\r\n            return (\r\n                <div>\r\n                <Header username={this.props.username}></Header>\r\n\r\n                <div className=\"container\">                    \r\n                 \r\n                    <h2> {currentQuestion.question}</h2>\r\n                    <h4>Question {currentIndex + 1} of {questionBank.length} </h4>\r\n                    <fieldset disabled={this.state.disabledOptions}>\r\n                        <div className=\"options\"><input id=\"o1\" onChange={this.setUserAnswer} type=\"radio\" name=\"group1\" value={currentQuestion.option1} checked={this.state.option1}/> {currentQuestion.option1}</div>\r\n                        <div className=\"options\"><input id=\"o2\" onChange={this.setUserAnswer} type=\"radio\" name=\"group1\" value={currentQuestion.option2} checked={this.state.option2}/> {currentQuestion.option2}</div>\r\n                        <div className=\"options\"><input id=\"o3\" onChange={this.setUserAnswer} type=\"radio\" name=\"group1\" value={currentQuestion.option3} checked={this.state.option3}/> {currentQuestion.option3}</div>\r\n                        <div className=\"options\"><input id=\"o4\" onChange={this.setUserAnswer} type=\"radio\" name=\"group1\" value={currentQuestion.option4} checked={this.state.option4}/> {currentQuestion.option4}</div>\r\n                    </fieldset> \r\n\r\n                    <div>\r\n                        <button onClick={this.checkAnswer} disabled={this.state.disabledCheck}>Check Answer</button>   \r\n                        <span>Your answer: {userAnswer} </span>\r\n                        <span>   Correct answer: {correctAnswer}</span>\r\n                    </div>\r\n                    <button className=\"button\" onClick={this.nextQuestionHander} disabled = {this.state.disabled}>Next</button>                          \r\n                </div >\r\n                <div> \r\n                    <center><button onClick={()=>{this.setState({endQuiz:true})}} >End Quiz Now</button></center>\r\n                    <br></br>\r\n                </div>\r\n                </div>\r\n            )\r\n        }\r\n        else { //Quiz have ended so, we load the Scoresheet component\r\n            return (\r\n                <div >\r\n                    <Scoresheet username={this.props.username} score={score} totalQuestions={questionBank.length} />\r\n                    <br />               \r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default Quiz\r\n","import React, { Component } from 'react'\r\nimport QuestionManager from './QuestionManager'\r\nimport Header from './Header'\r\nimport Quiz from './Quiz'\r\nimport Start from './Start'\r\nimport db from './db'\r\n\r\n\r\n\r\nexport class Game extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)   \r\n        this.state = {\r\n             numberOfQuestions:0,        //Number of question in the database\r\n             gotoQuestionManager: false, //If user clicked on Question Manager button\r\n             gotoQuiz: false,            //If user clicked on Start Quiz Button\r\n             username: '',               //Username, set by props from Start component\r\n             goBack: false               // if user clicked on exit button\r\n        }\r\n        this.manageQuestions = this.manageQuestions.bind(this)\r\n        this.startQuiz = this.startQuiz.bind(this)\r\n    }\r\n\r\n    //Query the database to count the number of questions available\r\n    componentDidMount(){\r\n        let count = 0;\r\n        db.questions.each((item) => count = count+1)\r\n        .then(() => {\r\n            this.setState({numberOfQuestions: count})\r\n        });\r\n        this.setState({\r\n            username: this.props.username\r\n        })\r\n    }\r\n\r\n    //User clicked on Question Manager button\r\n    manageQuestions(){       \r\n        this.setState({\r\n            gotoQuestionManager: true\r\n        })\r\n    }\r\n\r\n    //USer clicked on STart Quiz button\r\n    startQuiz(){\r\n        if(this.state.numberOfQuestions === 0){\r\n            alert(\"You must add at least one question before you can start the quiz\") //a little validation\r\n        }\r\n        else{\r\n          this.setState({\r\n              gotoQuiz: true\r\n          })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if(this.state.gotoQuestionManager === true){\r\n            return (\r\n                <div>\r\n                    <QuestionManager username={this.state.username}></QuestionManager>\r\n                </div>\r\n            )\r\n        }\r\n        else if(this.state.gotoQuiz === true){\r\n            return (\r\n                <div>\r\n                    <Quiz username={this.state.username}></Quiz>\r\n                </div>\r\n            )\r\n        }\r\n        else if(this.state.goBack ===true){\r\n            return(\r\n                <div>\r\n                    <Start></Start>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div>\r\n              <Header username={this.props.username}></Header>\r\n                <div className=\"container\">\r\n                    <hr />\r\n                    <center>\r\n                        <h1>Quiz Dashboard</h1>\r\n                        <h4>Number of questions in the database must be one or more before you can starte the quiz</h4>\r\n                        <h5>To add a question, please click on the Manage Questions button</h5>\r\n                    </center>\r\n                    <hr />\r\n                    Number of Question: {this.state.numberOfQuestions}<br />\r\n                    <button className=\"button\" onClick={this.manageQuestions}>Manage Questions</button>\r\n                    <button className=\"button green\" onClick={this.startQuiz}>Start Quiz</button> <br />\r\n                    <button onClick={()=>{this.setState({username:'', goBack:true})}}>Exit</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Game\r\n","import React, { Component } from 'react'\r\nimport Game from './Game'\r\nimport Header from './Header'\r\n\r\nexport class Start extends Component {\r\n    constructor(props) {\r\n        super(props)   \r\n        this.state = {\r\n             username: \"\",    //Initial value of username\r\n             start: false    //If user can go to dashboard\r\n        }\r\n        this.startGame = this.startGame.bind(this)\r\n    }\r\n\r\n    //Update Username when user types in the input field\r\n    setUsername = (event) => {\r\n        this.setState ({\r\n            username: event.target.value\r\n        })\r\n    }\r\n\r\n    //Check the user has entered a value in the username field\r\n    startGame(){ \r\n        if(this.state.username !== \"\"){\r\n            this.setState({\r\n                start: true\r\n            })\r\n        }\r\n    }    \r\n\r\n    render() {\r\n        //Load the Game Dashboard component if start is true\r\n        const{start}= this.state\r\n        if(start === true){\r\n            return (\r\n                <div>\r\n                    <Game username={this.state.username}></Game>\r\n                </div>\r\n            )\r\n        }\r\n        \r\n        return (\r\n            <div>\r\n            <Header username={this.state.username}></Header>\r\n            <div className=\"container\">  \r\n             <div className=\"home\">            \r\n                <h1>Welcome to the Quiz</h1><br />\r\n                Enter your username to start <br />\r\n                <input  type='text' onChange={this.setUsername} value={this.state.username} />\r\n                <br />\r\n                <button className=\"button\" disabled={this.state.username.length < 1} onClick={this.startGame}>Game Dashboard</button>\r\n            </div>\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Start\r\n","import React, { Component } from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport Start from './Start'\r\n\r\n\r\nexport class App extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Start></Start>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nReactDOM.render(<App></App>, document.getElementById(\"root\"))\r\n\r\n"],"sourceRoot":""}