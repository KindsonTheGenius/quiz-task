{"ast":null,"code":"var _jsxFileName = \"D:\\\\ReactProjects\\\\storage-app\\\\src\\\\Quiz.js\";\nimport Dexie from 'dexie';\nimport React, { Component } from 'react';\nimport QuestionBox from './QuestionBox';\nimport Scoresheet from './Scoresheet';\nimport \"./styles.css\";\nexport class Quiz extends Component {\n  constructor(props) {\n    super(props);\n\n    this.loadQuestions = () => {\n      let arr = [];\n      var db = new Dexie('questionsDB');\n      db.version(2).stores({\n        questions: 'id,question, option1, option2, option3, option4, answer'\n      });\n      db.open().catch(function () {\n        console.log(\"Error Occurred: \");\n      });\n      db.questions.each(item => arr.push(item)).then(() => this.setState({\n        questionBank: arr\n      }));\n    };\n\n    this.retakeQuiz = () => {\n      this.setState({\n        currentIndex: 0,\n        score: 0\n      });\n    };\n\n    this.nextQuestionHander = () => {\n      const {\n        answered\n      } = this.state;\n      console.log(answered);\n      this.setState({\n        currentIndex: this.state.currentIndex + 1,\n        disabled: true,\n        answered: false\n      });\n    };\n\n    this.checkAnswer = event => {\n      const {\n        score,\n        answered\n      } = this.state;\n\n      if (answered === false) {\n        console.log(answered);\n        console.log(event.target.innerHTML);\n        event.target.className = \"options selected\";\n\n        if (this.answerIsCorrect(event.target.innerHTML)) {\n          this.setState({\n            score: score + 1,\n            answered: true\n          });\n        }\n\n        this.setState({\n          disabled: false\n        });\n      }\n    };\n\n    this.setUserAnswer = event => {\n      console.log(event.target.innerText);\n    };\n\n    this.state = {\n      questionBank: [],\n      currentIndex: 0,\n      userAnswer: null,\n      score: 0,\n      disabled: true,\n      disabledOptions: false,\n      answered: false\n    };\n    this.checkAnswer = this.checkAnswer.bind(this);\n    this.answerIsCorrect = this.answerIsCorrect.bind(this);\n  } //Reads the question from IndexedDB and load them into the questionBank state\n\n\n  componentDidMount() {\n    this.loadQuestions();\n  }\n\n  answerIsCorrect(userAnswer) {\n    const {\n      currentIndex,\n      questionBank\n    } = this.state;\n\n    if (userAnswer === questionBank[currentIndex].answer) {\n      return true;\n    } else {\n      return false;\n    }\n  } //Increment score if answer is correct and enable Next button\n\n\n  render() {\n    console.log(\"Rendering.....\");\n    const {\n      currentIndex,\n      questionBank,\n      score,\n      baseStyle\n    } = this.state;\n    var currentQuestion = questionBank[currentIndex];\n\n    if (currentIndex <= questionBank.length - 1) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"questionBox\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, \" \", currentQuestion.question), React.createElement(\"fieldset\", {\n        disabled: this.state.disabledOptions,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        onChange: this.setUserAnswer,\n        type: \"radio\",\n        name: \"group1\",\n        value: currentQuestion.option1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }), currentQuestion.option1, \" \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"radio\",\n        name: \"group1\",\n        value: currentQuestion.option2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }), currentQuestion.option2, \">\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"radio\",\n        name: \"group1\",\n        value: currentQuestion.option2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }), currentQuestion.option3, \" \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"radio\",\n        name: \"group1\",\n        value: currentQuestion.option2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }), currentQuestion.option4, \" \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        onClick: this.checkAnswer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, \"Check Answer\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        onClick: this.nextQuestionHander,\n        disabled: this.state.disabled,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, \"Next\"));\n    } else {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, React.createElement(Scoresheet, {\n        score: score,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.retakeQuiz,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, \"Retake Quiz\"));\n    }\n  }\n\n}\nexport default Quiz;","map":{"version":3,"sources":["D:/ReactProjects/storage-app/src/Quiz.js"],"names":["Dexie","React","Component","QuestionBox","Scoresheet","Quiz","constructor","props","loadQuestions","arr","db","version","stores","questions","open","catch","console","log","each","item","push","then","setState","questionBank","retakeQuiz","currentIndex","score","nextQuestionHander","answered","state","disabled","checkAnswer","event","target","innerHTML","className","answerIsCorrect","setUserAnswer","innerText","userAnswer","disabledOptions","bind","componentDidMount","answer","render","baseStyle","currentQuestion","length","question","option1","option2","option3","option4"],"mappings":"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","sourcesContent":["import Dexie from 'dexie'\r\nimport React, { Component } from 'react'\r\nimport QuestionBox  from './QuestionBox'\r\nimport Scoresheet from './Scoresheet'\r\nimport \"./styles.css\"\r\n\r\n\r\nexport class Quiz extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n            questionBank: [],\r\n            currentIndex: 0,\r\n            userAnswer: null,\r\n            score:0,\r\n            disabled: true,\r\n            disabledOptions: false,\r\n            answered: false,\r\n        }\r\n\r\n        this.checkAnswer = this.checkAnswer.bind(this)\r\n        this.answerIsCorrect = this.answerIsCorrect.bind(this)\r\n    }\r\n    \r\n\r\n\r\n    //Reads the question from IndexedDB and load them into the questionBank state\r\n    loadQuestions = () => {\r\n        let arr = [];\r\n        var db = new Dexie('questionsDB');\r\n        db.version(2).stores({\r\n            questions: 'id,question, option1, option2, option3, option4, answer'\r\n        });\r\n\r\n        db.open().catch(function(){\r\n            console.log(\"Error Occurred: \")\r\n        });\r\n\r\n        db.questions.each((item) => arr.push(item))\r\n        .then(() => this.setState({questionBank: arr}));\r\n    }\r\n\r\n\r\n    componentDidMount(){\r\n        this.loadQuestions()\r\n    }\r\n\r\n    retakeQuiz = () => {\r\n        this.setState({\r\n            currentIndex: 0,\r\n            score:0\r\n        })\r\n    }\r\n\r\n\r\n    //Increment the currentIndex\r\n    nextQuestionHander = () => {\r\n        const{answered} = this.state\r\n        console.log(answered)\r\n        this.setState({\r\n            currentIndex:  this.state.currentIndex + 1,\r\n            disabled:true,\r\n            answered: false\r\n        })\r\n    }\r\n\r\n    answerIsCorrect(userAnswer){\r\n        const {currentIndex, questionBank} = this.state\r\n        if(userAnswer === questionBank[currentIndex].answer) {\r\n            return true\r\n        } else {return false}\r\n    }\r\n\r\n    //Increment score if answer is correct and enable Next button\r\n    checkAnswer = (event) =>{\r\n        const {score, answered} = this.state\r\n        if(answered === false) {\r\n            console.log(answered)\r\n            console.log(event.target.innerHTML)\r\n            event.target.className = \"options selected\"\r\n            if(this.answerIsCorrect(event.target.innerHTML)){\r\n                this.setState({\r\n                    score: score + 1,\r\n                    answered: true\r\n                })\r\n            }\r\n\r\n            this.setState({\r\n                disabled:false\r\n            })\r\n        }\r\n    }\r\n\r\n    setUserAnswer = (event) => {\r\n        console.log(event.target.innerText)\r\n    }\r\n\r\n\r\n    render() {\r\n        console.log(\"Rendering.....\")\r\n        const {currentIndex, questionBank, score, baseStyle} = this.state\r\n        var currentQuestion = questionBank[currentIndex]\r\n\r\n        if(currentIndex <= questionBank.length -1) {\r\n            return (\r\n                <div>                    \r\n                    <div className=\"questionBox\" >\r\n                    <h1> {currentQuestion.question}</h1>\r\n                    <fieldset disabled={this.state.disabledOptions}>\r\n                        <input onChange={this.setUserAnswer} type=\"radio\" name=\"group1\" value={currentQuestion.option1} />{currentQuestion.option1} <br />\r\n                        <input type=\"radio\" name=\"group1\" value={currentQuestion.option2} />{currentQuestion.option2}><br />\r\n                        <input type=\"radio\" name=\"group1\" value={currentQuestion.option2}/>{currentQuestion.option3} <br />\r\n                        <input type=\"radio\" name=\"group1\" value={currentQuestion.option2}/>{currentQuestion.option4} <br />\r\n                    </fieldset> \r\n                    <button onClick={this.checkAnswer}>Check Answer</button><br />\r\n                    </div>\r\n                    \r\n                <button \r\n                onClick={this.nextQuestionHander} \r\n                disabled = {this.state.disabled}>Next</button>\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n            return (\r\n                <div>\r\n                <Scoresheet score={score} ></Scoresheet>\r\n                <button onClick={this.retakeQuiz} >Retake Quiz</button>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default Quiz\r\n"]},"metadata":{},"sourceType":"module"}