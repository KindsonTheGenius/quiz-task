{"ast":null,"code":"import _classCallCheck from\"D:\\\\ReactProjects\\\\storage-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"D:\\\\ReactProjects\\\\storage-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"D:\\\\ReactProjects\\\\storage-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"D:\\\\ReactProjects\\\\storage-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";import _assertThisInitialized from\"D:\\\\ReactProjects\\\\storage-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";import _inherits from\"D:\\\\ReactProjects\\\\storage-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import React,{Component}from'react';import QuestionManager from'./QuestionManager';import Header from'./Header';import Quiz from'./Quiz';import Start from'./Start';import db from'./db';export var Game=/*#__PURE__*/function(_Component){_inherits(Game,_Component);function Game(props){var _this;_classCallCheck(this,Game);_this=_possibleConstructorReturn(this,_getPrototypeOf(Game).call(this,props));_this.state={numberOfQuestions:0,//Number of question in the database\ngotoQuestionManager:false,//If user clicked on Question Manager button\ngotoQuiz:false,//If user clicked on Start Quiz Button\nusername:'',//Username, set by props from Start component\ngoBack:false// if user clicked on exit button\n};_this.manageQuestions=_this.manageQuestions.bind(_assertThisInitialized(_this));_this.startQuiz=_this.startQuiz.bind(_assertThisInitialized(_this));return _this;}//Query the database to count the number of questions available\n_createClass(Game,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;var count=0;db.questions.each(function(item){return count=count+1;}).then(function(){_this2.setState({numberOfQuestions:count});});this.setState({username:this.props.username});}//User clicked on Question Manager button\n},{key:\"manageQuestions\",value:function manageQuestions(){this.setState({gotoQuestionManager:true});}//USer clicked on STart Quiz button\n},{key:\"startQuiz\",value:function startQuiz(){if(this.state.numberOfQuestions===0){alert(\"You must add at least one question before you can start the quiz\");//a little validation\n}else{this.setState({gotoQuiz:true});}}},{key:\"render\",value:function render(){var _this3=this;if(this.state.gotoQuestionManager===true){return React.createElement(\"div\",null,React.createElement(QuestionManager,{username:this.state.username}));}else if(this.state.gotoQuiz===true){return React.createElement(\"div\",null,React.createElement(Quiz,{username:this.state.username}));}else if(this.state.goBack===true){return React.createElement(\"div\",null,React.createElement(Start,null));}return React.createElement(\"div\",null,React.createElement(Header,{username:this.props.username}),React.createElement(\"div\",{className:\"container\"},React.createElement(\"hr\",null),React.createElement(\"center\",null,React.createElement(\"h1\",null,\"Quiz Dashboard\"),React.createElement(\"h4\",null,\"Number of questions in the database must be one or more before you can starte the quiz\"),React.createElement(\"h5\",null,\"To add a question, please click on the Manage Questions button\")),React.createElement(\"hr\",null),\"Number of Question: \",this.state.numberOfQuestions,React.createElement(\"br\",null),React.createElement(\"button\",{className:\"button\",onClick:this.manageQuestions},\"Manage Questions\"),React.createElement(\"button\",{className:\"button green\",onClick:this.startQuiz},\"Start Quiz\"),\" \",React.createElement(\"br\",null),React.createElement(\"button\",{onClick:function onClick(){_this3.setState({username:'',goBack:true});}},\"Exit\")));}}]);return Game;}(Component);export default Game;","map":{"version":3,"sources":["D:/ReactProjects/storage-app/src/Game.js"],"names":["React","Component","QuestionManager","Header","Quiz","Start","db","Game","props","state","numberOfQuestions","gotoQuestionManager","gotoQuiz","username","goBack","manageQuestions","bind","startQuiz","count","questions","each","item","then","setState","alert"],"mappings":"07BAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,eAAP,KAA4B,mBAA5B,CACA,MAAOC,CAAAA,MAAP,KAAmB,UAAnB,CACA,MAAOC,CAAAA,IAAP,KAAiB,QAAjB,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,MAAOC,CAAAA,EAAP,KAAe,MAAf,CAIA,UAAaC,CAAAA,IAAb,8DAEI,cAAYC,KAAZ,CAAmB,sCACf,sEAAMA,KAAN,GACA,MAAKC,KAAL,CAAa,CACRC,iBAAiB,CAAC,CADV,CACoB;AAC5BC,mBAAmB,CAAE,KAFb,CAEoB;AAC5BC,QAAQ,CAAE,KAHF,CAGoB;AAC5BC,QAAQ,CAAE,EAJF,CAIoB;AAC5BC,MAAM,CAAE,KAAoB;AALpB,CAAb,CAOA,MAAKC,eAAL,CAAuB,MAAKA,eAAL,CAAqBC,IAArB,+BAAvB,CACA,MAAKC,SAAL,CAAiB,MAAKA,SAAL,CAAeD,IAAf,+BAAjB,CAVe,aAWlB,CAED;AAfJ,8EAgBuB,iBACf,GAAIE,CAAAA,KAAK,CAAG,CAAZ,CACAZ,EAAE,CAACa,SAAH,CAAaC,IAAb,CAAkB,SAACC,IAAD,QAAUH,CAAAA,KAAK,CAAGA,KAAK,CAAC,CAAxB,EAAlB,EACCI,IADD,CACM,UAAM,CACR,MAAI,CAACC,QAAL,CAAc,CAACb,iBAAiB,CAAEQ,KAApB,CAAd,EACH,CAHD,EAIA,KAAKK,QAAL,CAAc,CACVV,QAAQ,CAAE,KAAKL,KAAL,CAAWK,QADX,CAAd,EAGH,CAED;AA3BJ,yDA4BqB,CACb,KAAKU,QAAL,CAAc,CACVZ,mBAAmB,CAAE,IADX,CAAd,EAGH,CAED;AAlCJ,6CAmCe,CACP,GAAG,KAAKF,KAAL,CAAWC,iBAAX,GAAiC,CAApC,CAAsC,CAClCc,KAAK,CAAC,kEAAD,CAAL,CAA0E;AAC7E,CAFD,IAGI,CACF,KAAKD,QAAL,CAAc,CACVX,QAAQ,CAAE,IADA,CAAd,EAGD,CACJ,CA5CL,uCA8Ca,iBACL,GAAG,KAAKH,KAAL,CAAWE,mBAAX,GAAmC,IAAtC,CAA2C,CACvC,MACI,gCACI,oBAAC,eAAD,EAAiB,QAAQ,CAAE,KAAKF,KAAL,CAAWI,QAAtC,EADJ,CADJ,CAKH,CAND,IAOK,IAAG,KAAKJ,KAAL,CAAWG,QAAX,GAAwB,IAA3B,CAAgC,CACjC,MACI,gCACI,oBAAC,IAAD,EAAM,QAAQ,CAAE,KAAKH,KAAL,CAAWI,QAA3B,EADJ,CADJ,CAKH,CANI,IAOA,IAAG,KAAKJ,KAAL,CAAWK,MAAX,GAAqB,IAAxB,CAA6B,CAC9B,MACI,gCACI,oBAAC,KAAD,MADJ,CADJ,CAKH,CAED,MACI,gCACE,oBAAC,MAAD,EAAQ,QAAQ,CAAE,KAAKN,KAAL,CAAWK,QAA7B,EADF,CAEI,2BAAK,SAAS,CAAC,WAAf,EACI,8BADJ,CAEI,kCACI,+CADJ,CAEI,uHAFJ,CAGI,+FAHJ,CAFJ,CAOI,8BAPJ,wBAQyB,KAAKJ,KAAL,CAAWC,iBARpC,CAQsD,8BARtD,CASI,8BAAQ,SAAS,CAAC,QAAlB,CAA2B,OAAO,CAAE,KAAKK,eAAzC,qBATJ,CAUI,8BAAQ,SAAS,CAAC,cAAlB,CAAiC,OAAO,CAAE,KAAKE,SAA/C,eAVJ,KAUkF,8BAVlF,CAWI,8BAAQ,OAAO,CAAE,kBAAI,CAAC,MAAI,CAACM,QAAL,CAAc,CAACV,QAAQ,CAAC,EAAV,CAAcC,MAAM,CAAC,IAArB,CAAd,EAA0C,CAAhE,SAXJ,CAFJ,CADJ,CAkBH,CAvFL,kBAA0Bb,SAA1B,EA0FA,cAAeM,CAAAA,IAAf","sourcesContent":["import React, { Component } from 'react'\r\nimport QuestionManager from './QuestionManager'\r\nimport Header from './Header'\r\nimport Quiz from './Quiz'\r\nimport Start from './Start'\r\nimport db from './db'\r\n\r\n\r\n\r\nexport class Game extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)   \r\n        this.state = {\r\n             numberOfQuestions:0,        //Number of question in the database\r\n             gotoQuestionManager: false, //If user clicked on Question Manager button\r\n             gotoQuiz: false,            //If user clicked on Start Quiz Button\r\n             username: '',               //Username, set by props from Start component\r\n             goBack: false               // if user clicked on exit button\r\n        }\r\n        this.manageQuestions = this.manageQuestions.bind(this)\r\n        this.startQuiz = this.startQuiz.bind(this)\r\n    }\r\n\r\n    //Query the database to count the number of questions available\r\n    componentDidMount(){\r\n        let count = 0;\r\n        db.questions.each((item) => count = count+1)\r\n        .then(() => {\r\n            this.setState({numberOfQuestions: count})\r\n        });\r\n        this.setState({\r\n            username: this.props.username\r\n        })\r\n    }\r\n\r\n    //User clicked on Question Manager button\r\n    manageQuestions(){       \r\n        this.setState({\r\n            gotoQuestionManager: true\r\n        })\r\n    }\r\n\r\n    //USer clicked on STart Quiz button\r\n    startQuiz(){\r\n        if(this.state.numberOfQuestions === 0){\r\n            alert(\"You must add at least one question before you can start the quiz\") //a little validation\r\n        }\r\n        else{\r\n          this.setState({\r\n              gotoQuiz: true\r\n          })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if(this.state.gotoQuestionManager === true){\r\n            return (\r\n                <div>\r\n                    <QuestionManager username={this.state.username}></QuestionManager>\r\n                </div>\r\n            )\r\n        }\r\n        else if(this.state.gotoQuiz === true){\r\n            return (\r\n                <div>\r\n                    <Quiz username={this.state.username}></Quiz>\r\n                </div>\r\n            )\r\n        }\r\n        else if(this.state.goBack ===true){\r\n            return(\r\n                <div>\r\n                    <Start></Start>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div>\r\n              <Header username={this.props.username}></Header>\r\n                <div className=\"container\">\r\n                    <hr />\r\n                    <center>\r\n                        <h1>Quiz Dashboard</h1>\r\n                        <h4>Number of questions in the database must be one or more before you can starte the quiz</h4>\r\n                        <h5>To add a question, please click on the Manage Questions button</h5>\r\n                    </center>\r\n                    <hr />\r\n                    Number of Question: {this.state.numberOfQuestions}<br />\r\n                    <button className=\"button\" onClick={this.manageQuestions}>Manage Questions</button>\r\n                    <button className=\"button green\" onClick={this.startQuiz}>Start Quiz</button> <br />\r\n                    <button onClick={()=>{this.setState({username:'', goBack:true})}}>Exit</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Game\r\n"]},"metadata":{},"sourceType":"module"}