{"ast":null,"code":"var _jsxFileName = \"D:\\\\ReactProjects\\\\storage-app\\\\src\\\\Quiz.js\";\nimport Dexie from 'dexie';\nimport React, { Component } from 'react';\nimport QuestionBox from './QuestionBox';\nimport Scoresheet from './Scoresheet';\nexport class Quiz extends Component {\n  constructor(props) {\n    super(props);\n\n    this.loadQuestions = () => {\n      let arr = [];\n      var db = new Dexie('questionsDB');\n      db.version(2).stores({\n        questions: 'id,question, option1, option2, option3, option4, answer'\n      });\n      db.open().catch(function () {\n        console.log(\"Error Occurred: \");\n      });\n      db.questions.each(item => arr.push(item)).then(() => this.setState({\n        questionBank: arr\n      }));\n    };\n\n    this.retakeQuiz = () => {\n      this.setState({\n        currentIndex: 0,\n        score: 0\n      });\n    };\n\n    this.nextQuestionHander = () => {\n      this.setState({\n        currentIndex: this.state.currentIndex + 1\n      });\n    };\n\n    this.state = {\n      questionBank: [],\n      currentIndex: 0,\n      userAnswer: null,\n      score: 0,\n      disabled: true\n    };\n    this.checkAnswer = this.checkAnswer.bind(this);\n  } //Reads the question from IndexedDB and load them into the questionBank state\n\n\n  componentDidMount() {\n    this.loadQuestions();\n  }\n\n  //Increment score if answer is correct\n  //Increment responses regardless\n  //Enable Next button\n  checkAnswer(selecteAnswer) {\n    const {\n      currentIndex,\n      questionBank,\n      score\n    } = this.state;\n\n    if (selecteAnswer === questionBank[currentIndex].answer) {\n      this.setState({\n        score: score + 1\n      });\n    }\n\n    this.setState({\n      userAnswer: selecteAnswer,\n      disabled: false\n    });\n  }\n\n  render() {\n    const {\n      currentIndex,\n      questionBank,\n      score\n    } = this.state;\n    var currentQuestion = questionBank[currentIndex];\n\n    if (currentIndex <= questionBank.length - 1) {\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(QuestionBox, {\n        checkAnswer: this.checkAnswer,\n        currentQuestion: currentQuestion,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        onClick: this.nextQuestionHander,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, \"Next\"));\n    } else {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(Scoresheet, {\n        score: score,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.retakeQuiz,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, \"Retake Quiz\"));\n    }\n  }\n\n}\nexport default Quiz;","map":{"version":3,"sources":["D:/ReactProjects/storage-app/src/Quiz.js"],"names":["Dexie","React","Component","QuestionBox","Scoresheet","Quiz","constructor","props","loadQuestions","arr","db","version","stores","questions","open","catch","console","log","each","item","push","then","setState","questionBank","retakeQuiz","currentIndex","score","nextQuestionHander","state","userAnswer","disabled","checkAnswer","bind","componentDidMount","selecteAnswer","answer","render","currentQuestion","length"],"mappings":"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","sourcesContent":["import Dexie from 'dexie'\r\nimport React, { Component } from 'react'\r\nimport QuestionBox  from './QuestionBox'\r\nimport Scoresheet from './Scoresheet'\r\n\r\n\r\nexport class Quiz extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n            questionBank: [],\r\n            currentIndex: 0,\r\n            userAnswer: null,\r\n            score:0,\r\n            disabled: true        \r\n        }\r\n\r\n        this.checkAnswer = this.checkAnswer.bind(this)\r\n\r\n    }\r\n    \r\n\r\n\r\n    //Reads the question from IndexedDB and load them into the questionBank state\r\n    loadQuestions = () => {\r\n        let arr = [];\r\n        var db = new Dexie('questionsDB');\r\n        db.version(2).stores({\r\n            questions: 'id,question, option1, option2, option3, option4, answer'\r\n        });\r\n\r\n        db.open().catch(function(){\r\n            console.log(\"Error Occurred: \")\r\n        });\r\n\r\n        db.questions.each((item) => arr.push(item))\r\n        .then(() => this.setState({questionBank: arr}));\r\n    }\r\n\r\n\r\n    componentDidMount(){\r\n        this.loadQuestions()\r\n    }\r\n\r\n    retakeQuiz = () => {\r\n        this.setState({\r\n            currentIndex: 0,\r\n            score:0\r\n        })\r\n    }\r\n\r\n\r\n    //Increment the currentIndex\r\n    nextQuestionHander = () => {\r\n        this.setState({\r\n            currentIndex:  this.state.currentIndex + 1\r\n        })\r\n    }\r\n\r\n    //Increment score if answer is correct\r\n    //Increment responses regardless\r\n    //Enable Next button\r\n    checkAnswer(selecteAnswer){\r\n        const {currentIndex, questionBank, score} = this.state\r\n\r\n        if(selecteAnswer === questionBank[currentIndex].answer){\r\n            this.setState({\r\n                score: score + 1\r\n            })\r\n        }\r\n\r\n        this.setState({\r\n            userAnswer: selecteAnswer,\r\n            disabled:false\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {currentIndex, questionBank, score} = this.state\r\n        var currentQuestion = questionBank[currentIndex]\r\n\r\n        if(currentIndex <= questionBank.length -1) {\r\n            return (\r\n                <>\r\n                <div>\r\n                    <QuestionBox checkAnswer={this.checkAnswer} currentQuestion = {currentQuestion}></QuestionBox>\r\n                </div>\r\n                <button onClick={this.nextQuestionHander}>Next</button>\r\n                </>\r\n            )\r\n        }\r\n        else {\r\n            return (\r\n                <div>\r\n                <Scoresheet score={score} ></Scoresheet>\r\n                <button onClick={this.retakeQuiz} >Retake Quiz</button>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default Quiz\r\n"]},"metadata":{},"sourceType":"module"}